{"name":"Lisphys","tagline":"A multi bodies systems simulator written in lisp and using automatic differentiation to build equations.","body":"### Lisphys : Physical simulation using Automatic Differentiation\r\nLisphys is a small project whose main goal is to experiment with Automatic Differentiation. More precisely, it is a kind of proof of concept that Automatic Differentiation can be used to create complex physics engines. \r\n\r\nHowever, Lisphys want to address the following points:\r\n* Demonstrate that Automatic Differentiation can ease development of physics engines\r\n* Provide a uniform framework to compute all the various derivative used in physics engines : Stiffness, Damping, Jacobian, Velocity, Acceleration, ...\r\n* Offer a pedagogic tool to discover physics simulation, by letting learner to experiment by themselves.\r\n\r\n#### How can Automatic Differentiation help to write physics engine ?\r\nWhen you're designing physics engine for multibodies system, two physical properties are important : position and forces.\r\n\r\nAll the others significant physical properties can be derived from this two ones :\r\n\r\n* Velocity is the time derivative of position p : v = dp / dt \r\n* Acceleration is the time derivative of velocity, hence, the second time derivative of position p :  a = dp / dt^2\r\n* Stiffness is the derivative of force f with restect to position p : k = df/dp\r\n* Damping is the the derivative of force f with respect to velocity v : d = df/dv\r\n* Jacobian, as used wot robot control, are the derivative of the 6D position with respect to the robot degrees of freedom.\r\n* ...\r\n\r\nHence, if you have a formula to describe the positions and forces of, and have the necessary tools to perform Automatic Differentiation, then it becomes easy to write a time integrator based on euler explicit or implicit methods. \r\n\r\nAnd these remarks also stand for fluid simulation, particules simulation, financial simulation, and so on.\r\n\r\n#### Lisphys for robotic simulation\r\nTo illustrate the use of Automatic Differentiation to write efficiently and easily physics engine, I've decided to implement a robot simulator.\r\n\r\nOur robots are modelized using generelized coordinates and a Lagrangian approach. See [Murray Ly Sastry](https://www.google.fr/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CCwQFjAA&url=http%3A%2F%2Fwww.cds.caltech.edu%2F~murray%2Fbooks%2FMLS%2Fpdf%2Fmls94-complete.pdf&ei=6sQpUsG_DoWp7Qbb4oGwAQ&usg=AFQjCNF7UfyyR12eG5iyqqikSzEJMsRZew&sig2=iqZtwiDWEnXwjZ-vo-Vdiw&bvm=bv.51773540,d.ZGU).\r\n\r\nHence Lie groups, i.e. SO(3), are used to modelize position, and Lie algebra, so(3) to modelize velicity.\r\n\r\n#### Examples\r\nProgressive examples can be found in the [examples directory](https://github.com/kayhman/lisphys/tree/master/src/examples).\r\n\r\n##### Features\r\nIn order to achieve its goal, Lisphys provides the followings utilities:\r\n\r\n* Automatic Differentiation, with Jacobian computation and support for 3D vectors and matrices\r\n* 3D vector class, with basic operation on it : cross product, dot product, norm, ...\r\n* Matrix class, with arithmetic operation and LU factorisation.\r\n* Twist, i.e. element of se(3) and Displacement, i.e. element of SE(3) classes, used to describe rigid bodies position and velocities.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}